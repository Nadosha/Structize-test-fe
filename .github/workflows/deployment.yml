name: Fancy Frontend Deployment
on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: Build Docker Image
    runs-on: ubuntu-latest
    # For using environment secrets you should define environment
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get latest git commit hash
        id: get-git-commit
        run: |
          IMAGE_TAG=$(git log -n1 --abbrev-commit | head -1 | awk '{print $2}')
          echo "::set-output name=tag::$IMAGE_TAG"

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO_FRONT}}
          IMAGE_TAG: ${{ steps.get-git-commit.outputs.tag }}
          APPLICATION_URL: ${{secrets.APPLICATION_URL}}
        run: |
          echo "IMAGE_TAG ${IMAGE_TAG}"
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

      - name: SSH into EC2 instance
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
            HOSTNAME: ${{ secrets.HOSTNAME }}
            USERNAME: ${{ secrets.USERNAME }}
            ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_FRONT }}
            IMAGE_TAG: ${{ steps.get-git-commit.outputs.tag }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          echo "IMAGE_TAG: ${IMAGE_TAG}"
          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} "
          echo "AWS credentials set...."
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_REGION}

            echo "Logging in to ECR...."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 942749301232.dkr.ecr.us-east-1.amazonaws.com
            echo "Logged in successful..."
          
            echo "Pulling  image from ECR..."
            docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
            cd /home/ubuntu && sed -i 's|${ECR_REGISTRY}/${ECR_REPOSITORY}:.*|${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}|' docker-compose.yml
            cd /home/ubuntu && docker-compose up -d
            docker system prune -af"
